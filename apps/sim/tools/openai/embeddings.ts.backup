import type { OpenAIEmbeddingsParams } from "@/tools/openai/types";
import type { ToolConfig } from "@/tools/types";

export const embeddingsTool: ToolConfig<OpenAIEmbeddingsParams> = {
  id: "openai_embeddings",
  name: "Qwen Embeddings",
  description:
    "Generate embeddings from text using Alibaba Cloud Qwen embedding models",
  version: "1.0",

  params: {
    input: {
      type: "string",
      required: true,
      visibility: "user-or-llm",
      description: "Text to generate embeddings for",
    },
    model: {
      type: "string",
      required: false,
      visibility: "user-only",
      description: "Model to use for embeddings",
      default: "text-embedding-v1",
    },
    apiKey: {
      type: "string",
      required: true,
      visibility: "user-only",
      description: "Alibaba Cloud API Key",
    },
  },
  outputs: {
    success: { type: "boolean", description: "Operation success status" },
    output: {
      type: "object",
      description: "Embeddings generation results",
      properties: {
        embeddings: {
          type: "array",
          description: "Array of embedding vectors",
        },
        model: {
          type: "string",
          description: "Model used for generating embeddings",
        },
        usage: {
          type: "object",
          description: "Token usage information",
          properties: {
            prompt_tokens: {
              type: "number",
              description: "Number of tokens in the prompt",
            },
            total_tokens: {
              type: "number",
              description: "Total number of tokens used",
            },
          },
        },
      },
    },
  },
  request: {
    method: "POST",
    url: () =>
      "https://dashscope.aliyuncs.com/api/v1/services/embeddings/text-embedding-v1/text-embedding",
    headers: (params) => ({
      Authorization: `Bearer ${params.apiKey}`,
      "Content-Type": "application/json",
    }),
    body: (params) => ({
      model: params.model || "text-embedding-v1",
      input: {
        texts: Array.isArray(params.input) ? params.input : [params.input],
      },
    }),
  },

  transformResponse: async (response) => {
    const data = await response.json();

    // 添加调试日志
    console.log("Qwen API Response:", JSON.stringify(data, null, 2));

    // 检查响应结构并安全地提取数据
    let embeddings = [];
    let model = "unknown";
    let usage = { prompt_tokens: 0, total_tokens: 0 };

    try {
      if (data.output && data.output.embeddings) {
        embeddings = data.output.embeddings.map(
          (item: any) => item.embedding || item
        );
      } else if (data.data) {
        embeddings = data.data.map((item: any) => item.embedding || item);
      }

      model = data.model || data.output?.model || "unknown";

      if (data.usage) {
        usage = {
          prompt_tokens: data.usage.prompt_tokens || 0,
          total_tokens: data.usage.total_tokens || 0,
        };
      }
    } catch (error) {
      console.error("Error parsing Qwen response:", error);
    }

    return {
      success: true,
      output: {
        embeddings,
        model,
        usage,
      },
    };
  },

  transformError: (error) => {
    console.error("Qwen embeddings error:", error);
    return `Qwen embeddings generation failed: ${error.message || "Unknown error"}`;
  },
};
